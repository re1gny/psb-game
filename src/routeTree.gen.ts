/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StartRouteImport } from './routes/start'
import { Route as RulesRouteImport } from './routes/rules'
import { Route as PathRulesRouteImport } from './routes/path-rules'
import { Route as PathRouteImport } from './routes/path'
import { Route as Level4WinRouteImport } from './routes/level-4-win'
import { Route as Level4RouteImport } from './routes/level-4'
import { Route as Level3WinRouteImport } from './routes/level-3-win'
import { Route as Level3RouteImport } from './routes/level-3'
import { Route as Level2WinRouteImport } from './routes/level-2-win'
import { Route as Level2RouteImport } from './routes/level-2'
import { Route as Level1WinRouteImport } from './routes/level-1-win'
import { Route as Level1RouteImport } from './routes/level-1'
import { Route as FullLooseRouteImport } from './routes/full-loose'
import { Route as FinalRouteImport } from './routes/final'
import { Route as IndexRouteImport } from './routes/index'

const StartRoute = StartRouteImport.update({
  id: '/start',
  path: '/start',
  getParentRoute: () => rootRouteImport,
} as any)
const RulesRoute = RulesRouteImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => rootRouteImport,
} as any)
const PathRulesRoute = PathRulesRouteImport.update({
  id: '/path-rules',
  path: '/path-rules',
  getParentRoute: () => rootRouteImport,
} as any)
const PathRoute = PathRouteImport.update({
  id: '/path',
  path: '/path',
  getParentRoute: () => rootRouteImport,
} as any)
const Level4WinRoute = Level4WinRouteImport.update({
  id: '/level-4-win',
  path: '/level-4-win',
  getParentRoute: () => rootRouteImport,
} as any)
const Level4Route = Level4RouteImport.update({
  id: '/level-4',
  path: '/level-4',
  getParentRoute: () => rootRouteImport,
} as any)
const Level3WinRoute = Level3WinRouteImport.update({
  id: '/level-3-win',
  path: '/level-3-win',
  getParentRoute: () => rootRouteImport,
} as any)
const Level3Route = Level3RouteImport.update({
  id: '/level-3',
  path: '/level-3',
  getParentRoute: () => rootRouteImport,
} as any)
const Level2WinRoute = Level2WinRouteImport.update({
  id: '/level-2-win',
  path: '/level-2-win',
  getParentRoute: () => rootRouteImport,
} as any)
const Level2Route = Level2RouteImport.update({
  id: '/level-2',
  path: '/level-2',
  getParentRoute: () => rootRouteImport,
} as any)
const Level1WinRoute = Level1WinRouteImport.update({
  id: '/level-1-win',
  path: '/level-1-win',
  getParentRoute: () => rootRouteImport,
} as any)
const Level1Route = Level1RouteImport.update({
  id: '/level-1',
  path: '/level-1',
  getParentRoute: () => rootRouteImport,
} as any)
const FullLooseRoute = FullLooseRouteImport.update({
  id: '/full-loose',
  path: '/full-loose',
  getParentRoute: () => rootRouteImport,
} as any)
const FinalRoute = FinalRouteImport.update({
  id: '/final',
  path: '/final',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/final': typeof FinalRoute
  '/full-loose': typeof FullLooseRoute
  '/level-1': typeof Level1Route
  '/level-1-win': typeof Level1WinRoute
  '/level-2': typeof Level2Route
  '/level-2-win': typeof Level2WinRoute
  '/level-3': typeof Level3Route
  '/level-3-win': typeof Level3WinRoute
  '/level-4': typeof Level4Route
  '/level-4-win': typeof Level4WinRoute
  '/path': typeof PathRoute
  '/path-rules': typeof PathRulesRoute
  '/rules': typeof RulesRoute
  '/start': typeof StartRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/final': typeof FinalRoute
  '/full-loose': typeof FullLooseRoute
  '/level-1': typeof Level1Route
  '/level-1-win': typeof Level1WinRoute
  '/level-2': typeof Level2Route
  '/level-2-win': typeof Level2WinRoute
  '/level-3': typeof Level3Route
  '/level-3-win': typeof Level3WinRoute
  '/level-4': typeof Level4Route
  '/level-4-win': typeof Level4WinRoute
  '/path': typeof PathRoute
  '/path-rules': typeof PathRulesRoute
  '/rules': typeof RulesRoute
  '/start': typeof StartRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/final': typeof FinalRoute
  '/full-loose': typeof FullLooseRoute
  '/level-1': typeof Level1Route
  '/level-1-win': typeof Level1WinRoute
  '/level-2': typeof Level2Route
  '/level-2-win': typeof Level2WinRoute
  '/level-3': typeof Level3Route
  '/level-3-win': typeof Level3WinRoute
  '/level-4': typeof Level4Route
  '/level-4-win': typeof Level4WinRoute
  '/path': typeof PathRoute
  '/path-rules': typeof PathRulesRoute
  '/rules': typeof RulesRoute
  '/start': typeof StartRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/final'
    | '/full-loose'
    | '/level-1'
    | '/level-1-win'
    | '/level-2'
    | '/level-2-win'
    | '/level-3'
    | '/level-3-win'
    | '/level-4'
    | '/level-4-win'
    | '/path'
    | '/path-rules'
    | '/rules'
    | '/start'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/final'
    | '/full-loose'
    | '/level-1'
    | '/level-1-win'
    | '/level-2'
    | '/level-2-win'
    | '/level-3'
    | '/level-3-win'
    | '/level-4'
    | '/level-4-win'
    | '/path'
    | '/path-rules'
    | '/rules'
    | '/start'
  id:
    | '__root__'
    | '/'
    | '/final'
    | '/full-loose'
    | '/level-1'
    | '/level-1-win'
    | '/level-2'
    | '/level-2-win'
    | '/level-3'
    | '/level-3-win'
    | '/level-4'
    | '/level-4-win'
    | '/path'
    | '/path-rules'
    | '/rules'
    | '/start'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FinalRoute: typeof FinalRoute
  FullLooseRoute: typeof FullLooseRoute
  Level1Route: typeof Level1Route
  Level1WinRoute: typeof Level1WinRoute
  Level2Route: typeof Level2Route
  Level2WinRoute: typeof Level2WinRoute
  Level3Route: typeof Level3Route
  Level3WinRoute: typeof Level3WinRoute
  Level4Route: typeof Level4Route
  Level4WinRoute: typeof Level4WinRoute
  PathRoute: typeof PathRoute
  PathRulesRoute: typeof PathRulesRoute
  RulesRoute: typeof RulesRoute
  StartRoute: typeof StartRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/start': {
      id: '/start'
      path: '/start'
      fullPath: '/start'
      preLoaderRoute: typeof StartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rules': {
      id: '/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof RulesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/path-rules': {
      id: '/path-rules'
      path: '/path-rules'
      fullPath: '/path-rules'
      preLoaderRoute: typeof PathRulesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/path': {
      id: '/path'
      path: '/path'
      fullPath: '/path'
      preLoaderRoute: typeof PathRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/level-4-win': {
      id: '/level-4-win'
      path: '/level-4-win'
      fullPath: '/level-4-win'
      preLoaderRoute: typeof Level4WinRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/level-4': {
      id: '/level-4'
      path: '/level-4'
      fullPath: '/level-4'
      preLoaderRoute: typeof Level4RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/level-3-win': {
      id: '/level-3-win'
      path: '/level-3-win'
      fullPath: '/level-3-win'
      preLoaderRoute: typeof Level3WinRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/level-3': {
      id: '/level-3'
      path: '/level-3'
      fullPath: '/level-3'
      preLoaderRoute: typeof Level3RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/level-2-win': {
      id: '/level-2-win'
      path: '/level-2-win'
      fullPath: '/level-2-win'
      preLoaderRoute: typeof Level2WinRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/level-2': {
      id: '/level-2'
      path: '/level-2'
      fullPath: '/level-2'
      preLoaderRoute: typeof Level2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/level-1-win': {
      id: '/level-1-win'
      path: '/level-1-win'
      fullPath: '/level-1-win'
      preLoaderRoute: typeof Level1WinRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/level-1': {
      id: '/level-1'
      path: '/level-1'
      fullPath: '/level-1'
      preLoaderRoute: typeof Level1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/full-loose': {
      id: '/full-loose'
      path: '/full-loose'
      fullPath: '/full-loose'
      preLoaderRoute: typeof FullLooseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/final': {
      id: '/final'
      path: '/final'
      fullPath: '/final'
      preLoaderRoute: typeof FinalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FinalRoute: FinalRoute,
  FullLooseRoute: FullLooseRoute,
  Level1Route: Level1Route,
  Level1WinRoute: Level1WinRoute,
  Level2Route: Level2Route,
  Level2WinRoute: Level2WinRoute,
  Level3Route: Level3Route,
  Level3WinRoute: Level3WinRoute,
  Level4Route: Level4Route,
  Level4WinRoute: Level4WinRoute,
  PathRoute: PathRoute,
  PathRulesRoute: PathRulesRoute,
  RulesRoute: RulesRoute,
  StartRoute: StartRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
